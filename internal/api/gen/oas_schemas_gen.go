// Code generated by ogen, DO NOT EDIT.

package api

import (
	"time"
)

// Ref: #/components/schemas/ErrorResponse
type ErrorResponse struct {
	// Сообщение об ошибке.
	Error OptString `json:"error"`
	// Код ошибки.
	Code OptInt `json:"code"`
}

// GetError returns the value of Error.
func (s *ErrorResponse) GetError() OptString {
	return s.Error
}

// GetCode returns the value of Code.
func (s *ErrorResponse) GetCode() OptInt {
	return s.Code
}

// SetError sets the value of Error.
func (s *ErrorResponse) SetError(val OptString) {
	s.Error = val
}

// SetCode sets the value of Code.
func (s *ErrorResponse) SetCode(val OptInt) {
	s.Code = val
}

func (*ErrorResponse) createEventRes() {}
func (*ErrorResponse) getMetricsRes()  {}

// Ref: #/components/schemas/EventRequest
type EventRequest struct {
	// Тип события.
	EventType string `json:"eventType"`
	// ID пользователя.
	UserId string `json:"userId"`
	// Время события (по умолчанию - текущее время).
	Timestamp OptDateTime `json:"timestamp"`
	// Дополнительные свойства события.
	Properties OptEventRequestProperties `json:"properties"`
}

// GetEventType returns the value of EventType.
func (s *EventRequest) GetEventType() string {
	return s.EventType
}

// GetUserId returns the value of UserId.
func (s *EventRequest) GetUserId() string {
	return s.UserId
}

// GetTimestamp returns the value of Timestamp.
func (s *EventRequest) GetTimestamp() OptDateTime {
	return s.Timestamp
}

// GetProperties returns the value of Properties.
func (s *EventRequest) GetProperties() OptEventRequestProperties {
	return s.Properties
}

// SetEventType sets the value of EventType.
func (s *EventRequest) SetEventType(val string) {
	s.EventType = val
}

// SetUserId sets the value of UserId.
func (s *EventRequest) SetUserId(val string) {
	s.UserId = val
}

// SetTimestamp sets the value of Timestamp.
func (s *EventRequest) SetTimestamp(val OptDateTime) {
	s.Timestamp = val
}

// SetProperties sets the value of Properties.
func (s *EventRequest) SetProperties(val OptEventRequestProperties) {
	s.Properties = val
}

// Дополнительные свойства события.
type EventRequestProperties map[string]string

func (s *EventRequestProperties) init() EventRequestProperties {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/EventResponse
type EventResponse struct {
	// ID обработанного события.
	ID OptString `json:"id"`
	// Статус обработки.
	Status OptString `json:"status"`
}

// GetID returns the value of ID.
func (s *EventResponse) GetID() OptString {
	return s.ID
}

// GetStatus returns the value of Status.
func (s *EventResponse) GetStatus() OptString {
	return s.Status
}

// SetID sets the value of ID.
func (s *EventResponse) SetID(val OptString) {
	s.ID = val
}

// SetStatus sets the value of Status.
func (s *EventResponse) SetStatus(val OptString) {
	s.Status = val
}

func (*EventResponse) createEventRes() {}

// Ref: #/components/schemas/MetricsResponse
type MetricsResponse struct {
	// Количество событий по типам.
	Counts OptMetricsResponseCounts `json:"counts"`
	// Количество уникальных пользователей.
	Users  OptInt                   `json:"users"`
	Period OptMetricsResponsePeriod `json:"period"`
}

// GetCounts returns the value of Counts.
func (s *MetricsResponse) GetCounts() OptMetricsResponseCounts {
	return s.Counts
}

// GetUsers returns the value of Users.
func (s *MetricsResponse) GetUsers() OptInt {
	return s.Users
}

// GetPeriod returns the value of Period.
func (s *MetricsResponse) GetPeriod() OptMetricsResponsePeriod {
	return s.Period
}

// SetCounts sets the value of Counts.
func (s *MetricsResponse) SetCounts(val OptMetricsResponseCounts) {
	s.Counts = val
}

// SetUsers sets the value of Users.
func (s *MetricsResponse) SetUsers(val OptInt) {
	s.Users = val
}

// SetPeriod sets the value of Period.
func (s *MetricsResponse) SetPeriod(val OptMetricsResponsePeriod) {
	s.Period = val
}

func (*MetricsResponse) getMetricsRes() {}

// Количество событий по типам.
type MetricsResponseCounts map[string]int

func (s *MetricsResponseCounts) init() MetricsResponseCounts {
	m := *s
	if m == nil {
		m = map[string]int{}
		*s = m
	}
	return m
}

type MetricsResponsePeriod struct {
	From OptDateTime `json:"from"`
	To   OptDateTime `json:"to"`
}

// GetFrom returns the value of From.
func (s *MetricsResponsePeriod) GetFrom() OptDateTime {
	return s.From
}

// GetTo returns the value of To.
func (s *MetricsResponsePeriod) GetTo() OptDateTime {
	return s.To
}

// SetFrom sets the value of From.
func (s *MetricsResponsePeriod) SetFrom(val OptDateTime) {
	s.From = val
}

// SetTo sets the value of To.
func (s *MetricsResponsePeriod) SetTo(val OptDateTime) {
	s.To = val
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEventRequestProperties returns new OptEventRequestProperties with value set to v.
func NewOptEventRequestProperties(v EventRequestProperties) OptEventRequestProperties {
	return OptEventRequestProperties{
		Value: v,
		Set:   true,
	}
}

// OptEventRequestProperties is optional EventRequestProperties.
type OptEventRequestProperties struct {
	Value EventRequestProperties
	Set   bool
}

// IsSet returns true if OptEventRequestProperties was set.
func (o OptEventRequestProperties) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEventRequestProperties) Reset() {
	var v EventRequestProperties
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEventRequestProperties) SetTo(v EventRequestProperties) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEventRequestProperties) Get() (v EventRequestProperties, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEventRequestProperties) Or(d EventRequestProperties) EventRequestProperties {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMetricsResponseCounts returns new OptMetricsResponseCounts with value set to v.
func NewOptMetricsResponseCounts(v MetricsResponseCounts) OptMetricsResponseCounts {
	return OptMetricsResponseCounts{
		Value: v,
		Set:   true,
	}
}

// OptMetricsResponseCounts is optional MetricsResponseCounts.
type OptMetricsResponseCounts struct {
	Value MetricsResponseCounts
	Set   bool
}

// IsSet returns true if OptMetricsResponseCounts was set.
func (o OptMetricsResponseCounts) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMetricsResponseCounts) Reset() {
	var v MetricsResponseCounts
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMetricsResponseCounts) SetTo(v MetricsResponseCounts) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMetricsResponseCounts) Get() (v MetricsResponseCounts, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMetricsResponseCounts) Or(d MetricsResponseCounts) MetricsResponseCounts {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptMetricsResponsePeriod returns new OptMetricsResponsePeriod with value set to v.
func NewOptMetricsResponsePeriod(v MetricsResponsePeriod) OptMetricsResponsePeriod {
	return OptMetricsResponsePeriod{
		Value: v,
		Set:   true,
	}
}

// OptMetricsResponsePeriod is optional MetricsResponsePeriod.
type OptMetricsResponsePeriod struct {
	Value MetricsResponsePeriod
	Set   bool
}

// IsSet returns true if OptMetricsResponsePeriod was set.
func (o OptMetricsResponsePeriod) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptMetricsResponsePeriod) Reset() {
	var v MetricsResponsePeriod
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptMetricsResponsePeriod) SetTo(v MetricsResponsePeriod) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptMetricsResponsePeriod) Get() (v MetricsResponsePeriod, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptMetricsResponsePeriod) Or(d MetricsResponsePeriod) MetricsResponsePeriod {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}
